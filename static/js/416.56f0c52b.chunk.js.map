{"version":3,"file":"static/js/416.56f0c52b.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.js","redux/selectors.js","components/ContactForm/ContactForm.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.jsx","components/pages/Contacts/Contacts.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  max-width: 300px;\n  margin: 18px auto 48px;\n  gap: 8px;\n  font-weight: bold;\n  font-size: 18px;\n`;\nexport const Input = styled.input`\n  border-radius: 20px;\n  display: block;\n  border: 2px solid black;\n  padding: 8px 16px;\n\n  &:active,\n  &:focus,\n  &:hover {\n    outline: none;\n    border-color: #007aff;\n  }\n`;\n\nexport const Button = styled.button`\n  border-radius: 20px;\n  background-color: black;\n  color: #e5e5e5;\n  font-size: 14px;\n  font-weight: bold;\n  text-transform: uppercase;\n  border: none;\n  padding: 8px 16px;\n  transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  &:hover {\n    background-color: #007aff;\n  }\n`;","import { createSelector } from \"@reduxjs/toolkit\";\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectFilter = state => state.filter;\nexport const selectContactsInfo = state => state.contacts;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(({ name }) =>\n      name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n\n","import { Form, Button, Input } from './ContactForm.styled';\n\nimport React, { useState } from 'react';\nimport { selectContacts } from 'redux/selectors';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { toast } from 'react-hot-toast';\nimport { addContact } from 'redux/operationsThunks';\n\nexport const ContactForm = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleChange = ({ target: { name, value } }) => {\n    if (name === 'name') setName(value);\n    if (name === 'number') setNumber(value);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    const isNameExist = contacts.find(\n      contact => name.toLowerCase() === contact.name.toLowerCase()\n    );\n    const isNumberExist = contacts.find(\n      contact => number.toLowerCase() === contact.number.toLowerCase()\n    );\n\n    if (isNameExist) {\n      toast.error(`${name} is already in contacts.`, {\n        duration: 1500,\n      });\n      return;\n    }\n    if (isNumberExist) {\n      toast.error(\n        `Number ${number} already exists in contacts with the name ${isNumberExist.name}.`\n      );\n      return;\n    }\n    dispatch(addContact({ name, number }));\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <label htmlFor=\"input_name\">Name</label>\n      <Input\n        id=\"input_name\"\n        type=\"text\"\n        name=\"name\"\n        placeholder=\"Enter contact name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n        onChange={handleChange}\n        value={name}\n      />\n\n      <label htmlFor=\"input_tel\">Phone number</label>\n\n      <Input\n        id=\"input_tel\"\n        type=\"tel\"\n        name=\"number\"\n        placeholder=\"Enter phone number\"\n        pattern=\"\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and contain more than 5 characters. Can contain spaces, dashes, parentheses and can start with +\"\n        required\n        onChange={handleChange}\n        value={number}\n      />\n\n      <Button type=\"submit\">Add contact</Button>\n    </Form>\n  );\n};\n","import styled from 'styled-components';\n\nexport const FilterWrap = styled.div`\n  display: flex;\n  flex-direction: column;\n  max-width: 300px;\n  margin: 0 auto 16px;\n  gap: 8px;\n  font-weight: bold;\n  font-size: 18px;\n  color: #007aff;\n`;\n","import { FilterWrap } from './Filter.styled';\nimport { Input } from '../ContactForm/ContactForm.styled';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectFilter } from 'redux/selectors';\nimport { setFilter } from 'redux/filterSlice';\n\nconst Filter = () => {\n  const value = useSelector(selectFilter);\n  const dispatch = useDispatch();\n  \n  const onChange = e => {\n    dispatch(setFilter(e.target.value.toLowerCase().trim()));\n  };\n\n  return (\n    <FilterWrap>\n      <label htmlFor=\"input_filter\">👇 Find contact by name</label>\n\n      <Input\n        id=\"input_filter\"\n        type=\"text\"\n        name=\"filter\"\n        placeholder=\"Start enter name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n        onChange={onChange}\n        value={value}\n      />\n    </FilterWrap>\n  );\n};\nexport default Filter;\n\n","import styled from 'styled-components';\n\nexport const ListItem = styled.li`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  align-content: center;\n  align-items: center;\n\n  flex-wrap: wrap;\n  margin: 0 auto;\n  gap: 8px;\n  font-size: 18px;\n  padding: 0 30px 16px;\n\n  @media screen and (min-width: 470px) {\n    flex-direction: row;\n    align-items: baseline;\n    gap: 16px;\n  }\n\n  & p {\n    flex-basis: calc((100% - 2 * 16px - 70px) / 2);\n    text-align: start;\n  }\n  & p:last-of-type {\n    word-break: break-word;\n  }\n  & p:last-of-type:hover {\n    color: #007aff;\n  }\n  \n`;\n\nexport const Button = styled.button`\n  border-radius: 8px;\n  background-color: black;\n  color: #e5e5e5;\n  font-size: 14px;\n  line-height: 1.5;\n  border: none;\n  padding: 4px 12px;\n  transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  &:hover {\n    background-color: #767676;\n  }\n`;","import { ListItem, Button } from './ContactList.styled';\nimport { selectVisibleContacts } from 'redux/selectors';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Notification from 'components/Notification/Notification';\nimport { deleteContact } from 'redux/operationsThunks';\n\nconst ContactList = () => {\n  const contacts = useSelector(selectVisibleContacts);\n  const dispatch = useDispatch();\n\n  const handleDelete = contactId => {\n    dispatch(deleteContact(contactId));\n  };\n\n   const handleCall = number => {\n     window.location = `tel:` + number;\n   };\n  \n  return (\n    <>\n      {contacts &&\n        (contacts.length === 0 ? (\n          <Notification message=\"🤷‍♂️ Nothing found\" />\n        ) : (\n          <ul>\n            {contacts.map(({ id, name, number }) => {\n              return (\n                <ListItem key={id}>\n                  <>\n                    <p>{name}:</p>\n                    <p onClick={() => handleCall(number)}>{number}</p>\n                  </>\n                  <Button type=\"button\" onClick={() => handleDelete(id)}>\n                    Delete\n                  </Button>\n                </ListItem>\n              );\n            })}\n          </ul>\n        ))}\n    </>\n  );\n};\nexport default ContactList;\n","import { ContactForm } from '../../ContactForm/ContactForm';\nimport Filter from '../../Filter/Filter';\nimport ContactList from '../../ContactList/ContactList';\nimport Notification from '../../Notification/Notification';\nimport {\n  Container,\n  Title,\n  toastOptions,\n} from 'components/StyledComponents/CommonElemens.styled';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContactsInfo } from 'redux/selectors';\n\nimport { Toaster } from 'react-hot-toast';\nimport { useEffect } from 'react';\nimport { fetchContacts } from 'redux/operationsThunks';\nimport { Loader } from '../../Loader/Loader';\n\nconst Contacts = () => {\n  const { items: contacts, isLoading, error } = useSelector(selectContactsInfo);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const isEmptyContactList = contacts?.length < 0;\n\n  return (\n    <Container>\n      <h1 hidden>Phonebook</h1>\n      <Title>Your phonebook</Title>\n      <Notification message=\"👇 Add number to contacts\" />\n      <ContactForm />\n\n      <Title>Contacts</Title>\n      {isEmptyContactList ? (\n        <Notification message=\"🤦‍♂️ Your phonebook is empty\" />\n      ) : (\n        <Filter />\n      )}\n      {isLoading && !contacts && <Loader />}\n      {error && <Notification message={error} />}\n      {contacts && <ContactList />}\n\n      <Toaster toastOptions={toastOptions} />\n    </Container>\n  );\n};\n\nexport default Contacts;\n\n// import { ContactForm } from '../../ContactForm/ContactForm';\n// import Filter from '../../Filter/Filter';\n// import ContactList from '../../ContactList/ContactList';\n// import Notification from '../../Notification/Notification';\n// import { Container, Title, toastOptions } from 'components/StyledComponents/CommonElemens.styled';\n\n// import { useDispatch, useSelector } from 'react-redux';\n// import { selectContactsInfo } from 'redux/selectors';\n\n// import { Toaster } from 'react-hot-toast';\n// import { useEffect } from 'react';\n// import { fetchContacts } from 'redux/operationsThunks';\n// import { Loader } from '../../Loader/Loader';\n\n// const Contacts = () => {\n//   const { items: contacts, isLoading, error } = useSelector(selectContactsInfo);\n//   const dispatch = useDispatch();\n\n//   useEffect(() => {\n//     dispatch(fetchContacts());\n//   }, [dispatch]);\n\n//   const isEmptyContactList = contacts?.length < 0;\n\n//   return (\n//     <Container>\n//       <h1>Phonebook</h1>\n//       <Notification message=\"Add number to contacts\" />\n//       <ContactForm />\n\n//       <Title>Contacts</Title>\n//       {isEmptyContactList ? (\n//         <Notification message=\"🤦‍♂️ Your phonebook is empty\" />\n//       ) : (\n//         <Filter />\n//       )}\n//       {isLoading && !contacts && <Loader />}\n//       {error && <Notification message={error} />}\n//       {contacts && <ContactList />}\n\n//       <Toaster toastOptions={toastOptions} />\n//     </Container>\n//   );\n// };\n\n// export default Contacts;\n"],"names":["Form","styled","_templateObject","_taggedTemplateLiteral","Input","_templateObject2","Button","_templateObject3","selectContacts","state","contacts","items","selectFilter","filter","selectContactsInfo","selectVisibleContacts","createSelector","_ref","name","toLowerCase","includes","ContactForm","useSelector","dispatch","useDispatch","_useState","useState","_useState2","_slicedToArray","setName","_useState3","_useState4","number","setNumber","handleChange","_ref$target","target","value","_jsxs","onSubmit","e","preventDefault","isNameExist","find","contact","isNumberExist","toast","concat","duration","addContact","children","_jsx","htmlFor","id","type","placeholder","pattern","title","required","onChange","FilterWrap","setFilter","trim","ListItem","_Fragment","length","Notification","message","map","onClick","window","location","handleCall","contactId","deleteContact","_useSelector","isLoading","error","useEffect","fetchContacts","isEmptyContactList","Container","hidden","Title","Filter","Loader","ContactList","Toaster","toastOptions"],"sourceRoot":""}